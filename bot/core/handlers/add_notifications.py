import asyncio

from aiogram import Router, F
from aiogram.types import Message

from datetime import datetime

from core.hash import create_hash


router = Router()


@router.message(F.text.lower() == "–¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üîî")
async def add_notification(message: Message):
    await message.answer(
        "–ù–∞–ø–∏—à–∏, –æ —á—ë–º —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n" +
        "<–ù–∞–∑–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è> <–î–î/–ú–ú/–ì–ì —á—á:–º–º:—Å—Å>\n" +
        "–ë–µ–∑ '<>' –∏ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å –ø—Ä–æ–±–µ–ª–æ–º –º–µ–∂–¥—É –¥–∞—Ç–æ–π –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º"
    )
    await message.answer(
        "–ü—Ä–∏–º–µ—Ä:\n" +
        "–ü–æ–∫–æ—Ä–º–∏—Ç—å –∫–æ—Ç–∞ 15/11/26 12:00:00"
    )


@router.message(F.text)
async def add(
        message: Message,
        notifications: dict
):
    date = message.text[-17:]
    name = message.text[:-18]
    hash = create_hash(name)
    try:
        wait = datetime.strptime(
            date,
            "%d/%m/%y %H:%M:%S"
        ) - datetime.now()
        delay = int(wait.total_seconds())
        notifications[hash] = [name, date]
        await message.answer(
            "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!"
        )
        await asyncio.sleep(delay)
        if notifications.get(hash) is None:
            return
        else:
            await message.answer(notifications[hash][0])
            notifications.pop(hash)
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!" +
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑"
        )
